/*
 * Nnwdaf_EventsSubscription
 *
 * Nnwdaf_EventsSubscription Service API. Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.2.0-alpha.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EventNotification struct for EventNotification
type EventNotification struct {
	Event NwdafEvent `json:"event"`
	Start *map[string]interface{} `json:"start,omitempty"`
	Expiry *map[string]interface{} `json:"expiry,omitempty"`
	TimeStampGen *map[string]interface{} `json:"timeStampGen,omitempty"`
	NfLoadLevelInfos *[]NfLoadLevelInformation `json:"nfLoadLevelInfos,omitempty"`
	NsiLoadLevelInfos *[]NsiLoadLevelInfo `json:"nsiLoadLevelInfos,omitempty"`
	SliceLoadLevelInfo *SliceLoadLevelInformation `json:"sliceLoadLevelInfo,omitempty"`
	SvcExps *[]ServiceExperienceInfo `json:"svcExps,omitempty"`
	QosSustainInfos *[]QosSustainabilityInfo `json:"qosSustainInfos,omitempty"`
	UeComms *[]UeCommunication `json:"ueComms,omitempty"`
	UeMobs *[]UeMobility `json:"ueMobs,omitempty"`
	UserDataCongInfos *[]UserDataCongestionInfo `json:"userDataCongInfos,omitempty"`
	AbnorBehavrs *[]AbnormalBehaviour `json:"abnorBehavrs,omitempty"`
	NwPerfs *[]NetworkPerfInfo `json:"nwPerfs,omitempty"`
}

// NewEventNotification instantiates a new EventNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventNotification(event NwdafEvent, ) *EventNotification {
	this := EventNotification{}
	this.Event = event
	return &this
}

// NewEventNotificationWithDefaults instantiates a new EventNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventNotificationWithDefaults() *EventNotification {
	this := EventNotification{}
	return &this
}

// GetEvent returns the Event field value
func (o *EventNotification) GetEvent() NwdafEvent {
	if o == nil  {
		var ret NwdafEvent
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *EventNotification) GetEventOk() (*NwdafEvent, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *EventNotification) SetEvent(v NwdafEvent) {
	o.Event = v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *EventNotification) GetStart() map[string]interface{} {
	if o == nil || o.Start == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification) GetStartOk() (*map[string]interface{}, bool) {
	if o == nil || o.Start == nil {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *EventNotification) HasStart() bool {
	if o != nil && o.Start != nil {
		return true
	}

	return false
}

// SetStart gets a reference to the given map[string]interface{} and assigns it to the Start field.
func (o *EventNotification) SetStart(v map[string]interface{}) {
	o.Start = &v
}

// GetExpiry returns the Expiry field value if set, zero value otherwise.
func (o *EventNotification) GetExpiry() map[string]interface{} {
	if o == nil || o.Expiry == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Expiry
}

// GetExpiryOk returns a tuple with the Expiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification) GetExpiryOk() (*map[string]interface{}, bool) {
	if o == nil || o.Expiry == nil {
		return nil, false
	}
	return o.Expiry, true
}

// HasExpiry returns a boolean if a field has been set.
func (o *EventNotification) HasExpiry() bool {
	if o != nil && o.Expiry != nil {
		return true
	}

	return false
}

// SetExpiry gets a reference to the given map[string]interface{} and assigns it to the Expiry field.
func (o *EventNotification) SetExpiry(v map[string]interface{}) {
	o.Expiry = &v
}

// GetTimeStampGen returns the TimeStampGen field value if set, zero value otherwise.
func (o *EventNotification) GetTimeStampGen() map[string]interface{} {
	if o == nil || o.TimeStampGen == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.TimeStampGen
}

// GetTimeStampGenOk returns a tuple with the TimeStampGen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification) GetTimeStampGenOk() (*map[string]interface{}, bool) {
	if o == nil || o.TimeStampGen == nil {
		return nil, false
	}
	return o.TimeStampGen, true
}

// HasTimeStampGen returns a boolean if a field has been set.
func (o *EventNotification) HasTimeStampGen() bool {
	if o != nil && o.TimeStampGen != nil {
		return true
	}

	return false
}

// SetTimeStampGen gets a reference to the given map[string]interface{} and assigns it to the TimeStampGen field.
func (o *EventNotification) SetTimeStampGen(v map[string]interface{}) {
	o.TimeStampGen = &v
}

// GetNfLoadLevelInfos returns the NfLoadLevelInfos field value if set, zero value otherwise.
func (o *EventNotification) GetNfLoadLevelInfos() []NfLoadLevelInformation {
	if o == nil || o.NfLoadLevelInfos == nil {
		var ret []NfLoadLevelInformation
		return ret
	}
	return *o.NfLoadLevelInfos
}

// GetNfLoadLevelInfosOk returns a tuple with the NfLoadLevelInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification) GetNfLoadLevelInfosOk() (*[]NfLoadLevelInformation, bool) {
	if o == nil || o.NfLoadLevelInfos == nil {
		return nil, false
	}
	return o.NfLoadLevelInfos, true
}

// HasNfLoadLevelInfos returns a boolean if a field has been set.
func (o *EventNotification) HasNfLoadLevelInfos() bool {
	if o != nil && o.NfLoadLevelInfos != nil {
		return true
	}

	return false
}

// SetNfLoadLevelInfos gets a reference to the given []NfLoadLevelInformation and assigns it to the NfLoadLevelInfos field.
func (o *EventNotification) SetNfLoadLevelInfos(v []NfLoadLevelInformation) {
	o.NfLoadLevelInfos = &v
}

// GetNsiLoadLevelInfos returns the NsiLoadLevelInfos field value if set, zero value otherwise.
func (o *EventNotification) GetNsiLoadLevelInfos() []NsiLoadLevelInfo {
	if o == nil || o.NsiLoadLevelInfos == nil {
		var ret []NsiLoadLevelInfo
		return ret
	}
	return *o.NsiLoadLevelInfos
}

// GetNsiLoadLevelInfosOk returns a tuple with the NsiLoadLevelInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification) GetNsiLoadLevelInfosOk() (*[]NsiLoadLevelInfo, bool) {
	if o == nil || o.NsiLoadLevelInfos == nil {
		return nil, false
	}
	return o.NsiLoadLevelInfos, true
}

// HasNsiLoadLevelInfos returns a boolean if a field has been set.
func (o *EventNotification) HasNsiLoadLevelInfos() bool {
	if o != nil && o.NsiLoadLevelInfos != nil {
		return true
	}

	return false
}

// SetNsiLoadLevelInfos gets a reference to the given []NsiLoadLevelInfo and assigns it to the NsiLoadLevelInfos field.
func (o *EventNotification) SetNsiLoadLevelInfos(v []NsiLoadLevelInfo) {
	o.NsiLoadLevelInfos = &v
}

// GetSliceLoadLevelInfo returns the SliceLoadLevelInfo field value if set, zero value otherwise.
func (o *EventNotification) GetSliceLoadLevelInfo() SliceLoadLevelInformation {
	if o == nil || o.SliceLoadLevelInfo == nil {
		var ret SliceLoadLevelInformation
		return ret
	}
	return *o.SliceLoadLevelInfo
}

// GetSliceLoadLevelInfoOk returns a tuple with the SliceLoadLevelInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification) GetSliceLoadLevelInfoOk() (*SliceLoadLevelInformation, bool) {
	if o == nil || o.SliceLoadLevelInfo == nil {
		return nil, false
	}
	return o.SliceLoadLevelInfo, true
}

// HasSliceLoadLevelInfo returns a boolean if a field has been set.
func (o *EventNotification) HasSliceLoadLevelInfo() bool {
	if o != nil && o.SliceLoadLevelInfo != nil {
		return true
	}

	return false
}

// SetSliceLoadLevelInfo gets a reference to the given SliceLoadLevelInformation and assigns it to the SliceLoadLevelInfo field.
func (o *EventNotification) SetSliceLoadLevelInfo(v SliceLoadLevelInformation) {
	o.SliceLoadLevelInfo = &v
}

// GetSvcExps returns the SvcExps field value if set, zero value otherwise.
func (o *EventNotification) GetSvcExps() []ServiceExperienceInfo {
	if o == nil || o.SvcExps == nil {
		var ret []ServiceExperienceInfo
		return ret
	}
	return *o.SvcExps
}

// GetSvcExpsOk returns a tuple with the SvcExps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification) GetSvcExpsOk() (*[]ServiceExperienceInfo, bool) {
	if o == nil || o.SvcExps == nil {
		return nil, false
	}
	return o.SvcExps, true
}

// HasSvcExps returns a boolean if a field has been set.
func (o *EventNotification) HasSvcExps() bool {
	if o != nil && o.SvcExps != nil {
		return true
	}

	return false
}

// SetSvcExps gets a reference to the given []ServiceExperienceInfo and assigns it to the SvcExps field.
func (o *EventNotification) SetSvcExps(v []ServiceExperienceInfo) {
	o.SvcExps = &v
}

// GetQosSustainInfos returns the QosSustainInfos field value if set, zero value otherwise.
func (o *EventNotification) GetQosSustainInfos() []QosSustainabilityInfo {
	if o == nil || o.QosSustainInfos == nil {
		var ret []QosSustainabilityInfo
		return ret
	}
	return *o.QosSustainInfos
}

// GetQosSustainInfosOk returns a tuple with the QosSustainInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification) GetQosSustainInfosOk() (*[]QosSustainabilityInfo, bool) {
	if o == nil || o.QosSustainInfos == nil {
		return nil, false
	}
	return o.QosSustainInfos, true
}

// HasQosSustainInfos returns a boolean if a field has been set.
func (o *EventNotification) HasQosSustainInfos() bool {
	if o != nil && o.QosSustainInfos != nil {
		return true
	}

	return false
}

// SetQosSustainInfos gets a reference to the given []QosSustainabilityInfo and assigns it to the QosSustainInfos field.
func (o *EventNotification) SetQosSustainInfos(v []QosSustainabilityInfo) {
	o.QosSustainInfos = &v
}

// GetUeComms returns the UeComms field value if set, zero value otherwise.
func (o *EventNotification) GetUeComms() []UeCommunication {
	if o == nil || o.UeComms == nil {
		var ret []UeCommunication
		return ret
	}
	return *o.UeComms
}

// GetUeCommsOk returns a tuple with the UeComms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification) GetUeCommsOk() (*[]UeCommunication, bool) {
	if o == nil || o.UeComms == nil {
		return nil, false
	}
	return o.UeComms, true
}

// HasUeComms returns a boolean if a field has been set.
func (o *EventNotification) HasUeComms() bool {
	if o != nil && o.UeComms != nil {
		return true
	}

	return false
}

// SetUeComms gets a reference to the given []UeCommunication and assigns it to the UeComms field.
func (o *EventNotification) SetUeComms(v []UeCommunication) {
	o.UeComms = &v
}

// GetUeMobs returns the UeMobs field value if set, zero value otherwise.
func (o *EventNotification) GetUeMobs() []UeMobility {
	if o == nil || o.UeMobs == nil {
		var ret []UeMobility
		return ret
	}
	return *o.UeMobs
}

// GetUeMobsOk returns a tuple with the UeMobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification) GetUeMobsOk() (*[]UeMobility, bool) {
	if o == nil || o.UeMobs == nil {
		return nil, false
	}
	return o.UeMobs, true
}

// HasUeMobs returns a boolean if a field has been set.
func (o *EventNotification) HasUeMobs() bool {
	if o != nil && o.UeMobs != nil {
		return true
	}

	return false
}

// SetUeMobs gets a reference to the given []UeMobility and assigns it to the UeMobs field.
func (o *EventNotification) SetUeMobs(v []UeMobility) {
	o.UeMobs = &v
}

// GetUserDataCongInfos returns the UserDataCongInfos field value if set, zero value otherwise.
func (o *EventNotification) GetUserDataCongInfos() []UserDataCongestionInfo {
	if o == nil || o.UserDataCongInfos == nil {
		var ret []UserDataCongestionInfo
		return ret
	}
	return *o.UserDataCongInfos
}

// GetUserDataCongInfosOk returns a tuple with the UserDataCongInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification) GetUserDataCongInfosOk() (*[]UserDataCongestionInfo, bool) {
	if o == nil || o.UserDataCongInfos == nil {
		return nil, false
	}
	return o.UserDataCongInfos, true
}

// HasUserDataCongInfos returns a boolean if a field has been set.
func (o *EventNotification) HasUserDataCongInfos() bool {
	if o != nil && o.UserDataCongInfos != nil {
		return true
	}

	return false
}

// SetUserDataCongInfos gets a reference to the given []UserDataCongestionInfo and assigns it to the UserDataCongInfos field.
func (o *EventNotification) SetUserDataCongInfos(v []UserDataCongestionInfo) {
	o.UserDataCongInfos = &v
}

// GetAbnorBehavrs returns the AbnorBehavrs field value if set, zero value otherwise.
func (o *EventNotification) GetAbnorBehavrs() []AbnormalBehaviour {
	if o == nil || o.AbnorBehavrs == nil {
		var ret []AbnormalBehaviour
		return ret
	}
	return *o.AbnorBehavrs
}

// GetAbnorBehavrsOk returns a tuple with the AbnorBehavrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification) GetAbnorBehavrsOk() (*[]AbnormalBehaviour, bool) {
	if o == nil || o.AbnorBehavrs == nil {
		return nil, false
	}
	return o.AbnorBehavrs, true
}

// HasAbnorBehavrs returns a boolean if a field has been set.
func (o *EventNotification) HasAbnorBehavrs() bool {
	if o != nil && o.AbnorBehavrs != nil {
		return true
	}

	return false
}

// SetAbnorBehavrs gets a reference to the given []AbnormalBehaviour and assigns it to the AbnorBehavrs field.
func (o *EventNotification) SetAbnorBehavrs(v []AbnormalBehaviour) {
	o.AbnorBehavrs = &v
}

// GetNwPerfs returns the NwPerfs field value if set, zero value otherwise.
func (o *EventNotification) GetNwPerfs() []NetworkPerfInfo {
	if o == nil || o.NwPerfs == nil {
		var ret []NetworkPerfInfo
		return ret
	}
	return *o.NwPerfs
}

// GetNwPerfsOk returns a tuple with the NwPerfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotification) GetNwPerfsOk() (*[]NetworkPerfInfo, bool) {
	if o == nil || o.NwPerfs == nil {
		return nil, false
	}
	return o.NwPerfs, true
}

// HasNwPerfs returns a boolean if a field has been set.
func (o *EventNotification) HasNwPerfs() bool {
	if o != nil && o.NwPerfs != nil {
		return true
	}

	return false
}

// SetNwPerfs gets a reference to the given []NetworkPerfInfo and assigns it to the NwPerfs field.
func (o *EventNotification) SetNwPerfs(v []NetworkPerfInfo) {
	o.NwPerfs = &v
}

func (o EventNotification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["event"] = o.Event
	}
	if o.Start != nil {
		toSerialize["start"] = o.Start
	}
	if o.Expiry != nil {
		toSerialize["expiry"] = o.Expiry
	}
	if o.TimeStampGen != nil {
		toSerialize["timeStampGen"] = o.TimeStampGen
	}
	if o.NfLoadLevelInfos != nil {
		toSerialize["nfLoadLevelInfos"] = o.NfLoadLevelInfos
	}
	if o.NsiLoadLevelInfos != nil {
		toSerialize["nsiLoadLevelInfos"] = o.NsiLoadLevelInfos
	}
	if o.SliceLoadLevelInfo != nil {
		toSerialize["sliceLoadLevelInfo"] = o.SliceLoadLevelInfo
	}
	if o.SvcExps != nil {
		toSerialize["svcExps"] = o.SvcExps
	}
	if o.QosSustainInfos != nil {
		toSerialize["qosSustainInfos"] = o.QosSustainInfos
	}
	if o.UeComms != nil {
		toSerialize["ueComms"] = o.UeComms
	}
	if o.UeMobs != nil {
		toSerialize["ueMobs"] = o.UeMobs
	}
	if o.UserDataCongInfos != nil {
		toSerialize["userDataCongInfos"] = o.UserDataCongInfos
	}
	if o.AbnorBehavrs != nil {
		toSerialize["abnorBehavrs"] = o.AbnorBehavrs
	}
	if o.NwPerfs != nil {
		toSerialize["nwPerfs"] = o.NwPerfs
	}
	return json.Marshal(toSerialize)
}

type NullableEventNotification struct {
	value *EventNotification
	isSet bool
}

func (v NullableEventNotification) Get() *EventNotification {
	return v.value
}

func (v *NullableEventNotification) Set(val *EventNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableEventNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableEventNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventNotification(val *EventNotification) *NullableEventNotification {
	return &NullableEventNotification{value: val, isSet: true}
}

func (v NullableEventNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


