/*
 * Nnwdaf_EventsSubscription
 *
 * Nnwdaf_EventsSubscription Service API. Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.2.0-alpha.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ServiceExperienceInfo struct for ServiceExperienceInfo
type ServiceExperienceInfo struct {
	SvcExprc map[string]interface{} `json:"svcExprc"`
	SvcExprcVariance *map[string]interface{} `json:"svcExprcVariance,omitempty"`
	Supis *[]map[string]interface{} `json:"supis,omitempty"`
	Snssai *map[string]interface{} `json:"snssai,omitempty"`
	AppId *map[string]interface{} `json:"appId,omitempty"`
	Confidence *map[string]interface{} `json:"confidence,omitempty"`
	Dnn *map[string]interface{} `json:"dnn,omitempty"`
	NetworkArea *map[string]interface{} `json:"networkArea,omitempty"`
	NsiId *map[string]interface{} `json:"nsiId,omitempty"`
	Ratio *map[string]interface{} `json:"ratio,omitempty"`
}

// NewServiceExperienceInfo instantiates a new ServiceExperienceInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceExperienceInfo(svcExprc map[string]interface{}, ) *ServiceExperienceInfo {
	this := ServiceExperienceInfo{}
	this.SvcExprc = svcExprc
	return &this
}

// NewServiceExperienceInfoWithDefaults instantiates a new ServiceExperienceInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceExperienceInfoWithDefaults() *ServiceExperienceInfo {
	this := ServiceExperienceInfo{}
	return &this
}

// GetSvcExprc returns the SvcExprc field value
func (o *ServiceExperienceInfo) GetSvcExprc() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}

	return o.SvcExprc
}

// GetSvcExprcOk returns a tuple with the SvcExprc field value
// and a boolean to check if the value has been set.
func (o *ServiceExperienceInfo) GetSvcExprcOk() (*map[string]interface{}, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SvcExprc, true
}

// SetSvcExprc sets field value
func (o *ServiceExperienceInfo) SetSvcExprc(v map[string]interface{}) {
	o.SvcExprc = v
}

// GetSvcExprcVariance returns the SvcExprcVariance field value if set, zero value otherwise.
func (o *ServiceExperienceInfo) GetSvcExprcVariance() map[string]interface{} {
	if o == nil || o.SvcExprcVariance == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.SvcExprcVariance
}

// GetSvcExprcVarianceOk returns a tuple with the SvcExprcVariance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceExperienceInfo) GetSvcExprcVarianceOk() (*map[string]interface{}, bool) {
	if o == nil || o.SvcExprcVariance == nil {
		return nil, false
	}
	return o.SvcExprcVariance, true
}

// HasSvcExprcVariance returns a boolean if a field has been set.
func (o *ServiceExperienceInfo) HasSvcExprcVariance() bool {
	if o != nil && o.SvcExprcVariance != nil {
		return true
	}

	return false
}

// SetSvcExprcVariance gets a reference to the given map[string]interface{} and assigns it to the SvcExprcVariance field.
func (o *ServiceExperienceInfo) SetSvcExprcVariance(v map[string]interface{}) {
	o.SvcExprcVariance = &v
}

// GetSupis returns the Supis field value if set, zero value otherwise.
func (o *ServiceExperienceInfo) GetSupis() []map[string]interface{} {
	if o == nil || o.Supis == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Supis
}

// GetSupisOk returns a tuple with the Supis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceExperienceInfo) GetSupisOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Supis == nil {
		return nil, false
	}
	return o.Supis, true
}

// HasSupis returns a boolean if a field has been set.
func (o *ServiceExperienceInfo) HasSupis() bool {
	if o != nil && o.Supis != nil {
		return true
	}

	return false
}

// SetSupis gets a reference to the given []map[string]interface{} and assigns it to the Supis field.
func (o *ServiceExperienceInfo) SetSupis(v []map[string]interface{}) {
	o.Supis = &v
}

// GetSnssai returns the Snssai field value if set, zero value otherwise.
func (o *ServiceExperienceInfo) GetSnssai() map[string]interface{} {
	if o == nil || o.Snssai == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Snssai
}

// GetSnssaiOk returns a tuple with the Snssai field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceExperienceInfo) GetSnssaiOk() (*map[string]interface{}, bool) {
	if o == nil || o.Snssai == nil {
		return nil, false
	}
	return o.Snssai, true
}

// HasSnssai returns a boolean if a field has been set.
func (o *ServiceExperienceInfo) HasSnssai() bool {
	if o != nil && o.Snssai != nil {
		return true
	}

	return false
}

// SetSnssai gets a reference to the given map[string]interface{} and assigns it to the Snssai field.
func (o *ServiceExperienceInfo) SetSnssai(v map[string]interface{}) {
	o.Snssai = &v
}

// GetAppId returns the AppId field value if set, zero value otherwise.
func (o *ServiceExperienceInfo) GetAppId() map[string]interface{} {
	if o == nil || o.AppId == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceExperienceInfo) GetAppIdOk() (*map[string]interface{}, bool) {
	if o == nil || o.AppId == nil {
		return nil, false
	}
	return o.AppId, true
}

// HasAppId returns a boolean if a field has been set.
func (o *ServiceExperienceInfo) HasAppId() bool {
	if o != nil && o.AppId != nil {
		return true
	}

	return false
}

// SetAppId gets a reference to the given map[string]interface{} and assigns it to the AppId field.
func (o *ServiceExperienceInfo) SetAppId(v map[string]interface{}) {
	o.AppId = &v
}

// GetConfidence returns the Confidence field value if set, zero value otherwise.
func (o *ServiceExperienceInfo) GetConfidence() map[string]interface{} {
	if o == nil || o.Confidence == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Confidence
}

// GetConfidenceOk returns a tuple with the Confidence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceExperienceInfo) GetConfidenceOk() (*map[string]interface{}, bool) {
	if o == nil || o.Confidence == nil {
		return nil, false
	}
	return o.Confidence, true
}

// HasConfidence returns a boolean if a field has been set.
func (o *ServiceExperienceInfo) HasConfidence() bool {
	if o != nil && o.Confidence != nil {
		return true
	}

	return false
}

// SetConfidence gets a reference to the given map[string]interface{} and assigns it to the Confidence field.
func (o *ServiceExperienceInfo) SetConfidence(v map[string]interface{}) {
	o.Confidence = &v
}

// GetDnn returns the Dnn field value if set, zero value otherwise.
func (o *ServiceExperienceInfo) GetDnn() map[string]interface{} {
	if o == nil || o.Dnn == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Dnn
}

// GetDnnOk returns a tuple with the Dnn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceExperienceInfo) GetDnnOk() (*map[string]interface{}, bool) {
	if o == nil || o.Dnn == nil {
		return nil, false
	}
	return o.Dnn, true
}

// HasDnn returns a boolean if a field has been set.
func (o *ServiceExperienceInfo) HasDnn() bool {
	if o != nil && o.Dnn != nil {
		return true
	}

	return false
}

// SetDnn gets a reference to the given map[string]interface{} and assigns it to the Dnn field.
func (o *ServiceExperienceInfo) SetDnn(v map[string]interface{}) {
	o.Dnn = &v
}

// GetNetworkArea returns the NetworkArea field value if set, zero value otherwise.
func (o *ServiceExperienceInfo) GetNetworkArea() map[string]interface{} {
	if o == nil || o.NetworkArea == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.NetworkArea
}

// GetNetworkAreaOk returns a tuple with the NetworkArea field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceExperienceInfo) GetNetworkAreaOk() (*map[string]interface{}, bool) {
	if o == nil || o.NetworkArea == nil {
		return nil, false
	}
	return o.NetworkArea, true
}

// HasNetworkArea returns a boolean if a field has been set.
func (o *ServiceExperienceInfo) HasNetworkArea() bool {
	if o != nil && o.NetworkArea != nil {
		return true
	}

	return false
}

// SetNetworkArea gets a reference to the given map[string]interface{} and assigns it to the NetworkArea field.
func (o *ServiceExperienceInfo) SetNetworkArea(v map[string]interface{}) {
	o.NetworkArea = &v
}

// GetNsiId returns the NsiId field value if set, zero value otherwise.
func (o *ServiceExperienceInfo) GetNsiId() map[string]interface{} {
	if o == nil || o.NsiId == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.NsiId
}

// GetNsiIdOk returns a tuple with the NsiId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceExperienceInfo) GetNsiIdOk() (*map[string]interface{}, bool) {
	if o == nil || o.NsiId == nil {
		return nil, false
	}
	return o.NsiId, true
}

// HasNsiId returns a boolean if a field has been set.
func (o *ServiceExperienceInfo) HasNsiId() bool {
	if o != nil && o.NsiId != nil {
		return true
	}

	return false
}

// SetNsiId gets a reference to the given map[string]interface{} and assigns it to the NsiId field.
func (o *ServiceExperienceInfo) SetNsiId(v map[string]interface{}) {
	o.NsiId = &v
}

// GetRatio returns the Ratio field value if set, zero value otherwise.
func (o *ServiceExperienceInfo) GetRatio() map[string]interface{} {
	if o == nil || o.Ratio == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Ratio
}

// GetRatioOk returns a tuple with the Ratio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceExperienceInfo) GetRatioOk() (*map[string]interface{}, bool) {
	if o == nil || o.Ratio == nil {
		return nil, false
	}
	return o.Ratio, true
}

// HasRatio returns a boolean if a field has been set.
func (o *ServiceExperienceInfo) HasRatio() bool {
	if o != nil && o.Ratio != nil {
		return true
	}

	return false
}

// SetRatio gets a reference to the given map[string]interface{} and assigns it to the Ratio field.
func (o *ServiceExperienceInfo) SetRatio(v map[string]interface{}) {
	o.Ratio = &v
}

func (o ServiceExperienceInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["svcExprc"] = o.SvcExprc
	}
	if o.SvcExprcVariance != nil {
		toSerialize["svcExprcVariance"] = o.SvcExprcVariance
	}
	if o.Supis != nil {
		toSerialize["supis"] = o.Supis
	}
	if o.Snssai != nil {
		toSerialize["snssai"] = o.Snssai
	}
	if o.AppId != nil {
		toSerialize["appId"] = o.AppId
	}
	if o.Confidence != nil {
		toSerialize["confidence"] = o.Confidence
	}
	if o.Dnn != nil {
		toSerialize["dnn"] = o.Dnn
	}
	if o.NetworkArea != nil {
		toSerialize["networkArea"] = o.NetworkArea
	}
	if o.NsiId != nil {
		toSerialize["nsiId"] = o.NsiId
	}
	if o.Ratio != nil {
		toSerialize["ratio"] = o.Ratio
	}
	return json.Marshal(toSerialize)
}

type NullableServiceExperienceInfo struct {
	value *ServiceExperienceInfo
	isSet bool
}

func (v NullableServiceExperienceInfo) Get() *ServiceExperienceInfo {
	return v.value
}

func (v *NullableServiceExperienceInfo) Set(val *ServiceExperienceInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceExperienceInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceExperienceInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceExperienceInfo(val *ServiceExperienceInfo) *NullableServiceExperienceInfo {
	return &NullableServiceExperienceInfo{value: val, isSet: true}
}

func (v NullableServiceExperienceInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceExperienceInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


