/*
 * Nnwdaf_EventsSubscription
 *
 * Nnwdaf_EventsSubscription Service API. Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.2.0-alpha.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NnwdafEventsSubscriptionNotification struct for NnwdafEventsSubscriptionNotification
type NnwdafEventsSubscriptionNotification struct {
	// Notifications about Individual Events
	EventNotifications []EventNotification `json:"eventNotifications"`
	// String identifying a subscription to the Nnwdaf_EventsSubscription Service
	SubscriptionId string `json:"subscriptionId"`
}

// NewNnwdafEventsSubscriptionNotification instantiates a new NnwdafEventsSubscriptionNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNnwdafEventsSubscriptionNotification(eventNotifications []EventNotification, subscriptionId string, ) *NnwdafEventsSubscriptionNotification {
	this := NnwdafEventsSubscriptionNotification{}
	this.EventNotifications = eventNotifications
	this.SubscriptionId = subscriptionId
	return &this
}

// NewNnwdafEventsSubscriptionNotificationWithDefaults instantiates a new NnwdafEventsSubscriptionNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNnwdafEventsSubscriptionNotificationWithDefaults() *NnwdafEventsSubscriptionNotification {
	this := NnwdafEventsSubscriptionNotification{}
	return &this
}

// GetEventNotifications returns the EventNotifications field value
func (o *NnwdafEventsSubscriptionNotification) GetEventNotifications() []EventNotification {
	if o == nil  {
		var ret []EventNotification
		return ret
	}

	return o.EventNotifications
}

// GetEventNotificationsOk returns a tuple with the EventNotifications field value
// and a boolean to check if the value has been set.
func (o *NnwdafEventsSubscriptionNotification) GetEventNotificationsOk() (*[]EventNotification, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EventNotifications, true
}

// SetEventNotifications sets field value
func (o *NnwdafEventsSubscriptionNotification) SetEventNotifications(v []EventNotification) {
	o.EventNotifications = v
}

// GetSubscriptionId returns the SubscriptionId field value
func (o *NnwdafEventsSubscriptionNotification) GetSubscriptionId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value
// and a boolean to check if the value has been set.
func (o *NnwdafEventsSubscriptionNotification) GetSubscriptionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SubscriptionId, true
}

// SetSubscriptionId sets field value
func (o *NnwdafEventsSubscriptionNotification) SetSubscriptionId(v string) {
	o.SubscriptionId = v
}

func (o NnwdafEventsSubscriptionNotification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["eventNotifications"] = o.EventNotifications
	}
	if true {
		toSerialize["subscriptionId"] = o.SubscriptionId
	}
	return json.Marshal(toSerialize)
}

type NullableNnwdafEventsSubscriptionNotification struct {
	value *NnwdafEventsSubscriptionNotification
	isSet bool
}

func (v NullableNnwdafEventsSubscriptionNotification) Get() *NnwdafEventsSubscriptionNotification {
	return v.value
}

func (v *NullableNnwdafEventsSubscriptionNotification) Set(val *NnwdafEventsSubscriptionNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableNnwdafEventsSubscriptionNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableNnwdafEventsSubscriptionNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNnwdafEventsSubscriptionNotification(val *NnwdafEventsSubscriptionNotification) *NullableNnwdafEventsSubscriptionNotification {
	return &NullableNnwdafEventsSubscriptionNotification{value: val, isSet: true}
}

func (v NullableNnwdafEventsSubscriptionNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNnwdafEventsSubscriptionNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


