/*
 * Nnwdaf_EventsSubscription
 *
 * Nnwdaf_EventsSubscription Service API. Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.2.0-alpha.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NnwdafEventsSubscription struct for NnwdafEventsSubscription
type NnwdafEventsSubscription struct {
	// Subscribed events
	EventSubscriptions []EventSubscription `json:"eventSubscriptions"`
	EvtReq *map[string]interface{} `json:"evtReq,omitempty"`
	NotificationURI *map[string]interface{} `json:"notificationURI,omitempty"`
	SupportedFeatures *map[string]interface{} `json:"supportedFeatures,omitempty"`
	EventNotifications *[]EventNotification `json:"eventNotifications,omitempty"`
	FailEventReports *[]FailureEventInfo `json:"failEventReports,omitempty"`
}

// NewNnwdafEventsSubscription instantiates a new NnwdafEventsSubscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNnwdafEventsSubscription(eventSubscriptions []EventSubscription, ) *NnwdafEventsSubscription {
	this := NnwdafEventsSubscription{}
	this.EventSubscriptions = eventSubscriptions
	return &this
}

// NewNnwdafEventsSubscriptionWithDefaults instantiates a new NnwdafEventsSubscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNnwdafEventsSubscriptionWithDefaults() *NnwdafEventsSubscription {
	this := NnwdafEventsSubscription{}
	return &this
}

// GetEventSubscriptions returns the EventSubscriptions field value
func (o *NnwdafEventsSubscription) GetEventSubscriptions() []EventSubscription {
	if o == nil  {
		var ret []EventSubscription
		return ret
	}

	return o.EventSubscriptions
}

// GetEventSubscriptionsOk returns a tuple with the EventSubscriptions field value
// and a boolean to check if the value has been set.
func (o *NnwdafEventsSubscription) GetEventSubscriptionsOk() (*[]EventSubscription, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EventSubscriptions, true
}

// SetEventSubscriptions sets field value
func (o *NnwdafEventsSubscription) SetEventSubscriptions(v []EventSubscription) {
	o.EventSubscriptions = v
}

// GetEvtReq returns the EvtReq field value if set, zero value otherwise.
func (o *NnwdafEventsSubscription) GetEvtReq() map[string]interface{} {
	if o == nil || o.EvtReq == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.EvtReq
}

// GetEvtReqOk returns a tuple with the EvtReq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NnwdafEventsSubscription) GetEvtReqOk() (*map[string]interface{}, bool) {
	if o == nil || o.EvtReq == nil {
		return nil, false
	}
	return o.EvtReq, true
}

// HasEvtReq returns a boolean if a field has been set.
func (o *NnwdafEventsSubscription) HasEvtReq() bool {
	if o != nil && o.EvtReq != nil {
		return true
	}

	return false
}

// SetEvtReq gets a reference to the given map[string]interface{} and assigns it to the EvtReq field.
func (o *NnwdafEventsSubscription) SetEvtReq(v map[string]interface{}) {
	o.EvtReq = &v
}

// GetNotificationURI returns the NotificationURI field value if set, zero value otherwise.
func (o *NnwdafEventsSubscription) GetNotificationURI() map[string]interface{} {
	if o == nil || o.NotificationURI == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.NotificationURI
}

// GetNotificationURIOk returns a tuple with the NotificationURI field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NnwdafEventsSubscription) GetNotificationURIOk() (*map[string]interface{}, bool) {
	if o == nil || o.NotificationURI == nil {
		return nil, false
	}
	return o.NotificationURI, true
}

// HasNotificationURI returns a boolean if a field has been set.
func (o *NnwdafEventsSubscription) HasNotificationURI() bool {
	if o != nil && o.NotificationURI != nil {
		return true
	}

	return false
}

// SetNotificationURI gets a reference to the given map[string]interface{} and assigns it to the NotificationURI field.
func (o *NnwdafEventsSubscription) SetNotificationURI(v map[string]interface{}) {
	o.NotificationURI = &v
}

// GetSupportedFeatures returns the SupportedFeatures field value if set, zero value otherwise.
func (o *NnwdafEventsSubscription) GetSupportedFeatures() map[string]interface{} {
	if o == nil || o.SupportedFeatures == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.SupportedFeatures
}

// GetSupportedFeaturesOk returns a tuple with the SupportedFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NnwdafEventsSubscription) GetSupportedFeaturesOk() (*map[string]interface{}, bool) {
	if o == nil || o.SupportedFeatures == nil {
		return nil, false
	}
	return o.SupportedFeatures, true
}

// HasSupportedFeatures returns a boolean if a field has been set.
func (o *NnwdafEventsSubscription) HasSupportedFeatures() bool {
	if o != nil && o.SupportedFeatures != nil {
		return true
	}

	return false
}

// SetSupportedFeatures gets a reference to the given map[string]interface{} and assigns it to the SupportedFeatures field.
func (o *NnwdafEventsSubscription) SetSupportedFeatures(v map[string]interface{}) {
	o.SupportedFeatures = &v
}

// GetEventNotifications returns the EventNotifications field value if set, zero value otherwise.
func (o *NnwdafEventsSubscription) GetEventNotifications() []EventNotification {
	if o == nil || o.EventNotifications == nil {
		var ret []EventNotification
		return ret
	}
	return *o.EventNotifications
}

// GetEventNotificationsOk returns a tuple with the EventNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NnwdafEventsSubscription) GetEventNotificationsOk() (*[]EventNotification, bool) {
	if o == nil || o.EventNotifications == nil {
		return nil, false
	}
	return o.EventNotifications, true
}

// HasEventNotifications returns a boolean if a field has been set.
func (o *NnwdafEventsSubscription) HasEventNotifications() bool {
	if o != nil && o.EventNotifications != nil {
		return true
	}

	return false
}

// SetEventNotifications gets a reference to the given []EventNotification and assigns it to the EventNotifications field.
func (o *NnwdafEventsSubscription) SetEventNotifications(v []EventNotification) {
	o.EventNotifications = &v
}

// GetFailEventReports returns the FailEventReports field value if set, zero value otherwise.
func (o *NnwdafEventsSubscription) GetFailEventReports() []FailureEventInfo {
	if o == nil || o.FailEventReports == nil {
		var ret []FailureEventInfo
		return ret
	}
	return *o.FailEventReports
}

// GetFailEventReportsOk returns a tuple with the FailEventReports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NnwdafEventsSubscription) GetFailEventReportsOk() (*[]FailureEventInfo, bool) {
	if o == nil || o.FailEventReports == nil {
		return nil, false
	}
	return o.FailEventReports, true
}

// HasFailEventReports returns a boolean if a field has been set.
func (o *NnwdafEventsSubscription) HasFailEventReports() bool {
	if o != nil && o.FailEventReports != nil {
		return true
	}

	return false
}

// SetFailEventReports gets a reference to the given []FailureEventInfo and assigns it to the FailEventReports field.
func (o *NnwdafEventsSubscription) SetFailEventReports(v []FailureEventInfo) {
	o.FailEventReports = &v
}

func (o NnwdafEventsSubscription) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["eventSubscriptions"] = o.EventSubscriptions
	}
	if o.EvtReq != nil {
		toSerialize["evtReq"] = o.EvtReq
	}
	if o.NotificationURI != nil {
		toSerialize["notificationURI"] = o.NotificationURI
	}
	if o.SupportedFeatures != nil {
		toSerialize["supportedFeatures"] = o.SupportedFeatures
	}
	if o.EventNotifications != nil {
		toSerialize["eventNotifications"] = o.EventNotifications
	}
	if o.FailEventReports != nil {
		toSerialize["failEventReports"] = o.FailEventReports
	}
	return json.Marshal(toSerialize)
}

type NullableNnwdafEventsSubscription struct {
	value *NnwdafEventsSubscription
	isSet bool
}

func (v NullableNnwdafEventsSubscription) Get() *NnwdafEventsSubscription {
	return v.value
}

func (v *NullableNnwdafEventsSubscription) Set(val *NnwdafEventsSubscription) {
	v.value = val
	v.isSet = true
}

func (v NullableNnwdafEventsSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableNnwdafEventsSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNnwdafEventsSubscription(val *NnwdafEventsSubscription) *NullableNnwdafEventsSubscription {
	return &NullableNnwdafEventsSubscription{value: val, isSet: true}
}

func (v NullableNnwdafEventsSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNnwdafEventsSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


