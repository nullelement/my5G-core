/*
 * Nnwdaf_EventsSubscription
 *
 * Nnwdaf_EventsSubscription Service API. Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.2.0-alpha.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UeMobility struct for UeMobility
type UeMobility struct {
	Ts *map[string]interface{} `json:"ts,omitempty"`
	RecurringTime *map[string]interface{} `json:"recurringTime,omitempty"`
	Duration map[string]interface{} `json:"duration"`
	DurationVariance *map[string]interface{} `json:"durationVariance,omitempty"`
	LocInfos []LocationInfo `json:"locInfos"`
}

// NewUeMobility instantiates a new UeMobility object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUeMobility(duration map[string]interface{}, locInfos []LocationInfo, ) *UeMobility {
	this := UeMobility{}
	this.Duration = duration
	this.LocInfos = locInfos
	return &this
}

// NewUeMobilityWithDefaults instantiates a new UeMobility object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUeMobilityWithDefaults() *UeMobility {
	this := UeMobility{}
	return &this
}

// GetTs returns the Ts field value if set, zero value otherwise.
func (o *UeMobility) GetTs() map[string]interface{} {
	if o == nil || o.Ts == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Ts
}

// GetTsOk returns a tuple with the Ts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeMobility) GetTsOk() (*map[string]interface{}, bool) {
	if o == nil || o.Ts == nil {
		return nil, false
	}
	return o.Ts, true
}

// HasTs returns a boolean if a field has been set.
func (o *UeMobility) HasTs() bool {
	if o != nil && o.Ts != nil {
		return true
	}

	return false
}

// SetTs gets a reference to the given map[string]interface{} and assigns it to the Ts field.
func (o *UeMobility) SetTs(v map[string]interface{}) {
	o.Ts = &v
}

// GetRecurringTime returns the RecurringTime field value if set, zero value otherwise.
func (o *UeMobility) GetRecurringTime() map[string]interface{} {
	if o == nil || o.RecurringTime == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.RecurringTime
}

// GetRecurringTimeOk returns a tuple with the RecurringTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeMobility) GetRecurringTimeOk() (*map[string]interface{}, bool) {
	if o == nil || o.RecurringTime == nil {
		return nil, false
	}
	return o.RecurringTime, true
}

// HasRecurringTime returns a boolean if a field has been set.
func (o *UeMobility) HasRecurringTime() bool {
	if o != nil && o.RecurringTime != nil {
		return true
	}

	return false
}

// SetRecurringTime gets a reference to the given map[string]interface{} and assigns it to the RecurringTime field.
func (o *UeMobility) SetRecurringTime(v map[string]interface{}) {
	o.RecurringTime = &v
}

// GetDuration returns the Duration field value
func (o *UeMobility) GetDuration() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}

	return o.Duration
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
func (o *UeMobility) GetDurationOk() (*map[string]interface{}, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Duration, true
}

// SetDuration sets field value
func (o *UeMobility) SetDuration(v map[string]interface{}) {
	o.Duration = v
}

// GetDurationVariance returns the DurationVariance field value if set, zero value otherwise.
func (o *UeMobility) GetDurationVariance() map[string]interface{} {
	if o == nil || o.DurationVariance == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.DurationVariance
}

// GetDurationVarianceOk returns a tuple with the DurationVariance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UeMobility) GetDurationVarianceOk() (*map[string]interface{}, bool) {
	if o == nil || o.DurationVariance == nil {
		return nil, false
	}
	return o.DurationVariance, true
}

// HasDurationVariance returns a boolean if a field has been set.
func (o *UeMobility) HasDurationVariance() bool {
	if o != nil && o.DurationVariance != nil {
		return true
	}

	return false
}

// SetDurationVariance gets a reference to the given map[string]interface{} and assigns it to the DurationVariance field.
func (o *UeMobility) SetDurationVariance(v map[string]interface{}) {
	o.DurationVariance = &v
}

// GetLocInfos returns the LocInfos field value
func (o *UeMobility) GetLocInfos() []LocationInfo {
	if o == nil  {
		var ret []LocationInfo
		return ret
	}

	return o.LocInfos
}

// GetLocInfosOk returns a tuple with the LocInfos field value
// and a boolean to check if the value has been set.
func (o *UeMobility) GetLocInfosOk() (*[]LocationInfo, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.LocInfos, true
}

// SetLocInfos sets field value
func (o *UeMobility) SetLocInfos(v []LocationInfo) {
	o.LocInfos = v
}

func (o UeMobility) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ts != nil {
		toSerialize["ts"] = o.Ts
	}
	if o.RecurringTime != nil {
		toSerialize["recurringTime"] = o.RecurringTime
	}
	if true {
		toSerialize["duration"] = o.Duration
	}
	if o.DurationVariance != nil {
		toSerialize["durationVariance"] = o.DurationVariance
	}
	if true {
		toSerialize["locInfos"] = o.LocInfos
	}
	return json.Marshal(toSerialize)
}

type NullableUeMobility struct {
	value *UeMobility
	isSet bool
}

func (v NullableUeMobility) Get() *UeMobility {
	return v.value
}

func (v *NullableUeMobility) Set(val *UeMobility) {
	v.value = val
	v.isSet = true
}

func (v NullableUeMobility) IsSet() bool {
	return v.isSet
}

func (v *NullableUeMobility) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUeMobility(val *UeMobility) *NullableUeMobility {
	return &NullableUeMobility{value: val, isSet: true}
}

func (v NullableUeMobility) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUeMobility) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


